<launch>
    <arg name="world" default="or_world1.world" />
    <arg name="attach_surgical_tool" default="false" />

    <!-- specify the planning pipeline -->
    <arg name="pipeline" default="ompl" />

    <!-- Load gazebo_state_plugins ROS parameters -->
    <include file="$(find gazebo_test_tools)/launch/gazebo_fake_object_recognition.launch"/>
    <!-- Load MoveIt! collision object generator -->
    <include file="$(find moveit_object_handling)/launch/collision_object_generator.launch">
        <arg name="config_file" value="$(find moveit_object_handling)/config/CollisionObjectsGenerator.yaml"/>
    </include>

    <include file="$(find kuka_barrett_control)/launch/kuka_barrett_control.launch">
        <arg name="world" value="$(arg world)" />
        <arg name="attach_surgical_tool" value="$(arg attach_surgical_tool)" />
    </include>
    
    <rosparam command="load" file="$(find moveit_config)/config/joint_names.yaml"/>
    <rosparam command="load" file="$(find moveit_config)/config/ros_controllers.yaml"/>

    <include file="$(find moveit_config)/launch/planning_context.launch" >
        <arg name="load_robot_description" value="false" />
    </include>

    <!-- If needed, broadcast static tf for robot root -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_1" args="0 0 0 0 0 0 world iiwa_link_0" />
    
    <!-- Actual robot joint states -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <!-- Do not use joint_state_publisher gui because it adds noise in the joint states (falls behind actual values) and affects (adds noise) when calculating rcm error. -->
        <param name="/use_gui" value="false"/>
        <rosparam param="/source_list">[/joint_states]</rosparam>
    </node>

    <!-- Virtual robot joint states -->
    <!-- <node name="fake_joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="/use_gui" value="false"/>
        <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    </node> -->

    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
    
    <include file="$(find moveit_config)/launch/move_group.launch">
        <arg name="publish_monitored_planning_scene" value="true" />
        <arg name="pipeline" value="$(arg pipeline)"/>
    </include>
    
    <include file="$(find moveit_config)/launch/moveit_rviz.launch">
        <arg name="config" value="true"/>
    </include>
</launch>
